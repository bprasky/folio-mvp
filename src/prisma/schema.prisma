// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  name          String
  bio           String?
  profileImage  String?
  profileType   String    // "designer", "vendor", "homeowner", "student", "admin", "lender"
  location      String?
  
  // Designer-specific fields
  specialties   String[]
  website       String?
  instagram     String?
  linkedin      String?
  
  // Vendor-specific fields
  companyName   String?
  
  // Homeowner-specific fields
  budgetRange   String?
  desiredRooms  String[]
  serviceLevel  String?
  projectStatus String?
  
  // Metrics
  followers     Int       @default(0)
  following     Int       @default(0)
  views         Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  designerProjects Project[] @relation("DesignerProjects")
  stories       Story[]
  vendorStories Story[]   @relation("StoryToVendor")
  products      Product[] @relation("VendorProducts")
  folders       Folder[]
  createdEvents Event[]   @relation("EventCreator")
  featuredEvents Event[]  @relation("EventFeaturedDesigner")
  eventAttendees EventAttendee[] @relation("EventAttendees")
  eventImages   EventImage[]    @relation("EventImages")
  eventComments EventComment[]  @relation("EventComments")
  
  @@map("users")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  category    String?   // "residential", "commercial", etc.
  client      String?
  status      String    @default("draft") // "draft", "published", "archived"
  
  // Metrics
  views       Int       @default(0)
  saves       Int       @default(0)
  shares      Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  designerId  String
  designer    User      @relation("DesignerProjects", fields: [designerId], references: [id])
  images      ProjectImage[]
  stories     Story[]
  
  @@map("projects")
}

model ProjectImage {
  id        String    @id @default(uuid())
  url       String
  name      String?
  room      String?
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags      ProductTag[]
  
  @@map("project_images")
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float?
  imageUrl    String?
  category    String?
  brand       String?
  url         String?   // Product page URL
  isPending   Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  vendorId    String?
  vendor      User?     @relation("VendorProducts", fields: [vendorId], references: [id])
  tags        ProductTag[]
  folderProducts FolderProduct[]
  eventProducts EventProduct[]
  
  @@map("products")
}

model ProductTag {
  id          String    @id @default(uuid())
  x           Float     // X coordinate percentage
  y           Float     // Y coordinate percentage
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  productId   String
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageId     String
  image       ProjectImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  
  @@map("product_tags")
}

model Folder {
  id          String    @id @default(uuid())
  name        String
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  designerId  String
  designer    User      @relation(fields: [designerId], references: [id])
  products    FolderProduct[]
  
  @@map("folders")
}

model FolderProduct {
  id        String    @id @default(uuid())
  
  createdAt DateTime  @default(now())

  // Relationships
  folderId  String
  folder    Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  productId String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([folderId, productId])
  @@map("folder_products")
}

model Story {
  id          String    @id @default(uuid())
  videoUrl    String
  thumbnailUrl String?
  duration    Int       // in seconds, max 60
  
  // Lifecycle
  createdAt   DateTime  @default(now())
  expiresAt   DateTime? // Null if pinned to project
  isPinned    Boolean   @default(false)

  // Engagement Metrics
  views       Int       @default(0)
  likes       Int       @default(0)

  // Relationships
  designerId  String
  designer    User      @relation(fields: [designerId], references: [id])

  projectId   String?
  project     Project?  @relation(fields: [projectId], references: [id])

  // Optional Tagging
  categories  Category[] @relation("StoryToCategory")
  vendors     User[]    @relation("StoryToVendor")
  
  @@map("stories")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  stories     Story[]   @relation("StoryToCategory")
  
  @@map("categories")
}

model Event {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  description   String?
  date          DateTime
  location      String
  coverImage    String
  status        String    @default("draft") // "draft", "published", "cancelled"
  
  // Host information
  hostType      String    // "designer", "vendor", "admin", "lender"
  hostId        String?   // Optional reference to User (for designer/vendor hosts)
  hostName      String    // Name of the host (could be company name for vendors)
  
  // Event details
  maxAttendees  Int?
  isPublic      Boolean   @default(true)
  
  // Event hierarchy and type
  eventType     String    @default("event") // "festival", "event", "showcase", etc.
  parentEventId String?
  parentEvent   Event?    @relation("EventHierarchy", fields: [parentEventId], references: [id])
  childEvents   Event[]   @relation("EventHierarchy")
  
  // Approval system
  approvalStatus String   @default("pending") // "pending", "approved", "rejected"
  approvedBy    String?
  approvedAt    DateTime?
  
  // Featured content
  featuredDesignerId String?
  featuredDesigner   User?   @relation("EventFeaturedDesigner", fields: [featuredDesignerId], references: [id])
  
  // Metrics
  views         Int       @default(0)
  attendeeCount Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  createdById   String
  createdBy     User      @relation("EventCreator", fields: [createdById], references: [id])
  attendees     EventAttendee[]
  products      EventProduct[]
  gallery       EventImage[]
  comments      EventComment[]
  
  @@map("events")
}

model EventAttendee {
  id        String    @id @default(uuid())
  status    String    @default("attending") // "attending", "declined", "maybe"
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation("EventAttendees", fields: [userId], references: [id])
  
  @@unique([eventId, userId])
  @@map("event_attendees")
}

model EventProduct {
  id        String    @id @default(uuid())
  
  createdAt DateTime  @default(now())

  // Relationships
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  productId String
  product   Product   @relation(fields: [productId], references: [id])
  
  @@unique([eventId, productId])
  @@map("event_products")
}

model EventImage {
  id        String    @id @default(uuid())
  url       String
  caption   String?
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation("EventImages", fields: [userId], references: [id])
  
  @@map("event_images")
}

model EventComment {
  id        String    @id @default(uuid())
  content   String
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  eventId   String
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation("EventComments", fields: [userId], references: [id])
  
  @@map("event_comments")
} 